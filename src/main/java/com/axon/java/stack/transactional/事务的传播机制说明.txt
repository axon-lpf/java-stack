在 Spring 中，事务的传播机制（Transaction Propagation）控制了事务在方法调用时的传播行为。Spring 提供了七种事务传播行为，每种行为适用于不同的场景。通过实际案例可以帮助开发者更好地理解这些传播机制。

1. PROPAGATION_REQUIRED（默认传播机制）

定义：如果当前存在事务，则加入该事务；如果没有事务，则新建一个事务。
适用场景：绝大多数场景下适用，例如当多个服务需要共享同一个事务时。

案例：
    @Transactional(propagation = Propagation.REQUIRED)
    public void methodA() {
        // 执行数据库操作
        methodB();  // methodB() 会加入 methodA() 的事务
    }

    @Transactional(propagation = Propagation.REQUIRED)
    public void methodB() {
        // 执行数据库操作
    }

开发者理解：methodB() 将加入 methodA() 的事务，因此如果 methodA() 回滚，methodB() 也会回滚。如果没有外部事务，则 methodB() 自行开启事务。


2. PROPAGATION_SUPPORTS

定义：如果当前有事务，就加入事务；如果没有事务，则以非事务方式执行。
适用场景：当某些方法不一定需要事务，但希望在有事务时能够使用事务。

案例：
    @Transactional(propagation = Propagation.REQUIRED)
    public void methodA() {
        methodB();  // methodB() 将加入 methodA() 的事务
    }

    @Transactional(propagation = Propagation.SUPPORTS)
    public void methodB() {
        // 在有事务时参与事务，没有事务时则非事务执行
    }

开发者理解：如果 methodA() 开启了事务，methodB() 也会加入事务；否则 methodB() 不会开启事务，执行操作不受事务控制。


3. PROPAGATION_MANDATORY

定义：必须在现有事务中执行，如果当前没有事务，则抛出异常。
适用场景：需要确保该方法必须运行在事务中。

案例：
    @Transactional(propagation = Propagation.REQUIRED)
    public void methodA() {
        methodB();  // methodB() 正常执行
    }

    @Transactional(propagation = Propagation.MANDATORY)
    public void methodB() {
        // 必须在事务中执行
    }
开发者理解：如果没有外部事务时调用 methodB()，将抛出异常，确保该方法不能在非事务环境中运行。


4. PROPAGATION_REQUIRES_NEW

定义：新建一个事务，如果当前有事务，暂停当前事务。
适用场景：需要独立事务的场景，比如日志操作或外部系统的操作。

案例：
    @Transactional(propagation = Propagation.REQUIRED)
    public void methodA() {
        // 事务1
        methodB();  // 新建一个事务（事务2）
        // 事务1恢复
    }

    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void methodB() {
        // 独立的新事务（事务2），不受 methodA 的事务影响
    }

开发者理解：methodB() 会开启一个新的事务，不会受 methodA() 事务的回滚或提交影响。即使 methodA() 回滚，methodB() 的事务也会独立提交或回滚。



5. PROPAGATION_NOT_SUPPORTED

定义：以非事务方式执行操作，如果当前有事务，挂起该事务。
适用场景：某些不需要事务的操作，或者为了避免长时间占用数据库资源。

案例：
    @Transactional(propagation = Propagation.REQUIRED)
    public void methodA() {
        methodB();  // methodB() 非事务执行，methodA() 的事务被挂起
    }

    @Transactional(propagation = Propagation.NOT_SUPPORTED)
    public void methodB() {
        // 以非事务方式执行
    }

  开发者理解：methodB() 不会使用 methodA() 的事务，即便 methodA() 有事务，methodB() 也会非事务执行。如果 methodB() 执行失败，不会导致 methodA() 的回滚。

6. PROPAGATION_NEVER

定义：以非事务方式执行操作，如果当前存在事务，则抛出异常。
适用场景：强制要求某个方法不能运行在事务中。

案例：
    @Transactional(propagation = Propagation.REQUIRED)
    public void methodA() {
        methodB();  // 会抛出异常
    }

    @Transactional(propagation = Propagation.NEVER)
    public void methodB() {
        // 必须在非事务环境下执行
    }

开发者理解：methodB() 强制要求非事务执行，如果 methodA() 已经开启事务，调用 methodB() 将抛出异常。



7. PROPAGATION_NESTED

定义：如果当前有事务，则在嵌套事务内执行。如果没有事务，则新建事务。
适用场景：需要在一个大事务内处理多个部分，并希望对某部分单独回滚。

案例：
    @Transactional(propagation = Propagation.REQUIRED)
    public void methodA() {
        try {
            methodB();  // 嵌套事务
        } catch (Exception e) {
            // methodA() 回滚时，methodB() 的部分可以独立回滚
        }
    }

    @Transactional(propagation = Propagation.NESTED)
    public void methodB() {
        // 嵌套在 methodA 的事务中
    }

开发者理解：嵌套事务允许部分回滚。例如，methodB() 的事务可以在 methodA() 回滚时被部分回滚，而不影响整个 methodA() 事务的提交。



事务的传播机制
1.如果当前存在事务，则加入该事务；如果没有事务，则新建一个事务。
2.如果当前有事务，就加入事务；如果没有事务，则以非事务方式执行。
3.必须在现有事务中执行，如果当前没有事务，则抛出异常。
4.新建一个事务，如果当前有事务，暂停当前事务。
5.以非事务方式执行操作，如果当前有事务，挂起该事务。
6.以非事务方式执行操作，如果当前存在事务，则抛出异常。
7.如果当前有事务，则在嵌套事务内执行。如果没有事务，则新建事务。



1. PROPAGATION_REQUIRED
	•	描述：如果当前存在事务，则加入该事务；如果没有事务，则新建一个事务。
	•	记忆法：“必需”：当前事务存在就加入，不存在就新建事务。
	•	关键字：加入事务、新建事务。

2. PROPAGATION_SUPPORTS
	•	描述：如果当前有事务，就加入事务；如果没有事务，则以非事务方式执行。
	•	记忆法：“支持”：当前事务存在就支持事务，当前无事务就以非事务方式执行。
	•	关键字：支持事务、非事务执行。

3. PROPAGATION_MANDATORY
	•	描述：必须在现有事务中执行，如果当前没有事务，则抛出异常。
	•	记忆法：“强制”：必须有事务，否则抛出异常。
	•	关键字：必须有事务、抛出异常。

4. PROPAGATION_REQUIRES_NEW
	•	描述：新建一个事务，如果当前有事务，暂停当前事务。
	•	记忆法：“新建事务”：当前事务被暂停，新建一个事务。
	•	关键字：新建事务、暂停当前事务。

5. PROPAGATION_NOT_SUPPORTED
	•	描述：以非事务方式执行操作，如果当前有事务，挂起该事务。
	•	记忆法：“不支持事务”：以非事务方式执行，如果有事务挂起。
	•	关键字：非事务执行、挂起事务。

6. PROPAGATION_NEVER
	•	描述：以非事务方式执行操作，如果当前存在事务，则抛出异常。
	•	记忆法：“从不”：绝对不使用事务，如果存在事务就抛出异常。
	•	关键字：非事务执行、抛出异常。

7. PROPAGATION_NESTED
	•	描述：如果当前有事务，则在嵌套事务内执行。如果没有事务，则新建事务。
	•	记忆法：“嵌套”：当前有事务时在其内嵌套执行，如果没有事务则新建一个事务。
	•	关键字：嵌套事务、新建事务。



总结记忆法：
	•	Required (必需)：有就加入，没有就新建。
	•	Supports (支持)：有就支持，没有就不管。
	•	Mandatory (强制)：有就用，没有就抛异常。
	•	Requires New (新建事务)：新建事务，暂停现有事务。

	•	Not Supported (不支持)：非事务方式，挂起现有事务。
	•	Never (从不)：非事务方式，若有事务抛异常。

	•	Nested (嵌套)：在当前事务内执行，若没有则新建。

这些关键字和行为的简化理解可以帮助你在实际工作中快速识别每个事务传播机制的用途，形成记忆框架。







1. Spring 事务在什么情况下会失效？

Spring 事务可能会失效的情况通常涉及以下几种常见场景：

1.1. 事务方法未被代理
	•	问题：Spring 的事务是通过 代理（基于 AOP）机制来实现的。若方法在 内部调用 时，事务可能无法生效，因为代理只会应用于 外部调用。
	•	解决方法：确保事务方法通过外部调用触发，而不是在同一个类中被直接调用。可以通过 @Transactional 注解来标注需要事务的方法。

1.2. 非运行时异常未触发事务回滚
	•	问题：默认情况下，Spring 事务只会在 运行时异常（RuntimeException）和 错误（Error）发生时触发回滚，而 检查异常（CheckedException）不会触发回滚。
	•	解决方法：可以通过设置 @Transactional(rollbackFor = Exception.class) 来指定回滚所有异常，或者仅回滚特定类型的异常。

1.3. 事务传播机制不正确
	•	问题：如果事务的传播行为设置不正确，可能会导致事务管理失效。例如，Propagation.REQUIRES_NEW 会创建一个新的事务，而不是使用当前的事务，可能会导致数据一致性问题。
	•	解决方法：检查事务的传播行为，确保使用适当的传播机制。例如，使用 REQUIRED 来确保事务的一致性。

1.4. 事务管理器配置问题
	•	问题：如果没有正确配置事务管理器或事务数据源，Spring 的事务管理可能会失效。例如，使用 @EnableTransactionManagement 时，事务管理器必须正确配置。
	•	解决方法：检查 @Configuration 中是否正确配置了事务管理器，如 DataSourceTransactionManager，确保事务管理器能够正确工作。

1.5. 数据库不支持事务或事务被禁用
	•	问题：某些数据库（如不支持事务的数据库）或配置错误的数据库连接可能会导致事务无法正常工作。
	•	解决方法：确保数据库连接支持事务，并且在事务管理器中正确配置了数据库连接。