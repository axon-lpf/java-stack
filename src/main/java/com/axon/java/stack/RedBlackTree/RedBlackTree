什么是红黑树？

红黑树是一种 自平衡二叉搜索树，通过颜色属性来保证树的平衡性。它的每个节点有一个颜色属性，不是红色就是黑色，并通过一系列规则来确保插入和删除操作后，树的高度维持在 O(log n)，从而保证了较快的查找、插入和删除操作。

红黑树的结构和性质

红黑树的结构遵循以下规则：

	1.	每个节点要么是红色，要么是黑色。
	2.	根节点是黑色。
	3.	每个叶节点（空节点）是黑色。
	4.	如果一个节点是红色，则它的两个子节点都是黑色（即没有连续的红色节点）。
	5.	从任何节点到其每个叶节点的所有路径上都包含相同数量的黑色节点。

这些规则保证了树在最坏情况下的平衡，使得查找、插入和删除操作的时间复杂度都能保持在 O(log n)。

红黑树与 B+ 树的区别

	1.	用途：
	•	红黑树：常用于编程语言中的集合类和映射类（如 Java 的 TreeMap、TreeSet），用于需要高效查找的场景。
	•	B+ 树：广泛用于数据库索引结构，尤其适用于存储和访问大数据。MySQL 的 InnoDB 存储引擎使用 B+ 树作为索引结构。
	2.	结构：
	•	红黑树是二叉树，每个节点最多有两个子节点。
	•	B+ 树是多路平衡树，每个节点可以有多个子节点。
	3.	自平衡方式：
	•	红黑树通过节点的颜色和旋转操作来维持平衡。
	•	B+ 树通过分裂和合并节点来保持平衡。
	4.	存储方式：
	•	红黑树的所有节点都包含数据。
	•	B+ 树的内部节点仅包含索引，数据只存储在叶子节点，这使得范围查询更高效。



红黑树的结构定义：

java 代码
    // 节点定义
    class Node<K extends Comparable<K>, V> {
        K key;
        V value;
        Node<K, V> left, right, parent;
        boolean isRed; // true for red, false for black

        public Node(K key, V value) {
            this.key = key;
            this.value = value;
            this.isRed = true; // new nodes are always red initially
        }
    }


在红黑树（或其他自平衡二叉树）的实现中，节点的 left、right 和 parent 变量分别用于管理节点的子节点和父节点。这些指针或引用是维护树结构和确保树的平衡性的基础。下面是这些字段的具体作用：

left 和 right 字段

	•	作用：指向当前节点的左子节点和右子节点。每个节点在红黑树中最多有两个子节点，这两个字段用于存储这两个子节点的引用。
	•	重要性：
	•	在插入、删除或查找节点时，这些字段用于遍历树。
	•	在树的旋转操作中，这些字段用于调整节点的关系。
	•	在红黑树的平衡调整（如旋转和重新着色）中，这些字段用于重新链接节点。

parent 字段

	•	作用：指向当前节点的父节点。每个节点在树中的位置通过其父节点和子节点来确定。
	•	重要性：
	•	在插入或删除操作时，这个字段帮助找到节点的位置和调整树的结构。
	•	在进行旋转操作时，这个字段用于更新父节点对当前节点的引用。
	•	在树的修复过程中（例如，调整颜色和旋转以维持红黑树的性质），这个字段用于访问和更新节点的父节点信息。



例子说明

假设我们有以下红黑树结构：

          20
         /  \
        15   30
       /    /  \
      10   25   35

在这个树中：

	•	节点 20 的 left 指针指向 15，right 指针指向 30。
	•	节点 15 的 left 指针指向 10，right 指针为空，parent 指针指向 20。
	•	节点 30 的 left 指针指向 25，right 指针指向 35，parent 指针指向 20。

通过这些字段，红黑树能够有效地执行各种操作：

	•	查找：从根节点开始，根据 left 和 right 指针逐层遍历。
	•	插入：在合适的位置插入新节点，更新 left 和 right 指针，并调整 parent 指针。
	•	删除：删除节点，重新链接父节点和子节点，确保树的平衡。
	•	旋转：调整树的结构以维护平衡，涉及更新多个节点的 left、right 和 parent 指针。

这些字段确保了树的结构能够灵活地调整，并使得树的操作保持高效。

