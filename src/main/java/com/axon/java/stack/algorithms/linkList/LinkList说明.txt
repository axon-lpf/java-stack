LinkedList 是基于双向链表的数据结构。

优点：

	•	插入和删除快：由于链表节点只需要调整相邻节点的指针，在链表中间插入或删除元素时，时间复杂度为  O(1) （前提是已定位到插入或删除的位置）。
	•	不需要扩容：LinkedList 动态地分配节点，不需要像数组那样一次性分配大块内存。
	•	适合频繁的插入和删除：特别是对于在集合的两端或中间位置的操作，性能更好。

缺点：

	•	随机访问慢：链表中的元素不连续存储，访问元素需要从头或尾部开始遍历，时间复杂度为  O(n) 。
	•	内存开销大：链表节点需要存储额外的前驱和后继指针，内存使用比 ArrayList 更大。
	•	缓存性能差：链表节点分散在内存中，不利于 CPU 缓存的局部性原理。

选择建议：

	•	如果你的应用程序主要需要频繁随机访问（通过索引访问），并且插入和删除操作相对较少，使用 ArrayList 会更好。
	•	如果你的应用程序需要频繁插入和删除操作，特别是在列表的中间位置，LinkedList 是更合适的选择。