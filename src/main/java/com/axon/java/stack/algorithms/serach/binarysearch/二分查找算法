二分查找法是一种高效的查找算法，适用于在有序数组中查找指定元素。它通过每次将查找范围缩小一半，大大减少了查找的次数，具有 O(log n) 的时间复杂度，非常适合查找范围大但已排序的数据集。

二分查找法的核心逻辑

	1.	初始化查找范围：确定数组的左边界 (left) 和右边界 (right)。
	2.	查找中间元素：
	•	计算中间位置 mid = (left + right) / 2。
	•	取出中间位置的值 midVal = arr[mid]。
	3.	比较并缩小范围：
	•	如果 searchKey == midVal，表示找到目标值，返回其索引。
	•	如果 searchKey < midVal，目标值在左半部分，将 right 更新为 mid - 1。
	•	如果 searchKey > midVal，目标值在右半部分，将 left 更新为 mid + 1。
	4.	结束条件：
	•	查找范围缩小到 left > right 时，表示目标值不在数组中，返回 -1。

二分查找法的特点

	•	前提条件：数据必须是有序的。若无序，需要先进行排序。
	•	时间复杂度：O(log n)，随着数据规模增大，查找效率提升显著。
	•	空间复杂度：对于递归实现，空间复杂度为 O(log n)；对于非递归实现，空间复杂度为 O(1)。

使用场景

	•	常用于静态数据集的查找，如数据库索引查找、常用的数据结构中（如二叉查找树）的数据定位等。
	•	尤其适合数据量大且排序的情况，如文本字典的单词查找。

二分查找法的局限性

	•	只适用于有序数据。如果数据无序，必须先排序再进行二分查找。
	•	数组中的数据不频繁变动。如果数据频繁变动且需要重新排序，可能增加额外的开销。