斐波那契查找中的公式：


mid =left + F(k-1) - 1


需要理解的是：为什么斐波那契查找选择这种公式来确定中间索引，并且它如何利用斐波那契数列分割查找空间。下面我们将逐步推导公式。

1. 斐波那契查找的背景

斐波那契查找是一种改进的二分查找算法，利用了斐波那契数列的特性来确定分割点。二分查找每次都将数组分为两半，而斐波那契查找则使用斐波那契数列中的比值来分割数组，使分割比例更接近实际情况，尤其适合有序数组。

斐波那契数列为： F(0) = 0 、 F(1) = 1 、 F(2) = 1 、 F(3) = 2 、 F(4) = 3 、 F(5) = 5 ，  F(6) = 8 、 F(7) =13 、 F(8) = 21 ，等等，其中：


F(k) = F(k-1) + F(k-2)


2. 核心思想：使用斐波那契数列分割

	•	给定数组 arr，初始查找范围为 [left, right]。
	•	假设查找范围的长度  F(k) ，即接近一个斐波那契数。
	•	为了分割数组，使得查找更精确地定位到目标值，我们要找到“中间”位置 mid。

3. 选择 mid 的位置

在二分查找中，mid 是通过  mid = (left + right)/2  计算得到的。
但在斐波那契查找中，我们通过斐波那契数列的特性来分割查找区间，更贴近目标值的位置。

(1) 分割思路

我们知道斐波那契数列有如下性质：


F(k) = F(k-1) + F(k-2)


这意味着，数组长度  F(k)  的范围可以分割为：

	1.	长度为  F(k-1)  的左半部分
	2.	长度为  F(k-2)  的右半部分

因此，“中间位置”应该落在左边的  F(k-1)  个元素的末尾。具体索引位置 mid 的计算公式为：


mid = left + F(k-1) - 1


其中：

	•	left 是当前查找范围的起点
	•	 F(k-1) - 1  是向右偏移的索引位置，正好落在左半部分的末尾位置。

(2) 进一步理解公式中的每一项

	•	left：当前查找区间的左边界，表示从哪里开始查找。
	•	F(k-1) - 1：相对于 left 的偏移量，将位置 mid 定位在长度为  F(k-1)  的左半部分末尾。

4. 举例推导

假设有一个长度为 21 的有序数组 arr，且 F(k) = 21，那么我们可以取：

	•	 F(k) = 21 ， F(k-1) = 13 ， F(k-2) = 8 。

第一次划分：

	1.	初始区间是 [0, 20]。
	2.	取 mid 为：

mid = 0 + F(8-1) - 1 = 0 + 13 - 1 = 12


这样，第一次查找范围被划分为左边长度为 13 的子区间 [0, 12] 和右边长度为 8 的子区间 [13, 20]。

进一步查找：

如果目标值小于 arr[mid]，则进入左边的 [0, 12] 子区间继续查找；反之，进入右边的 [13, 20] 子区间。

在子区间中继续采用斐波那契数列重新分割，重复上述步骤，直到找到目标值或查找范围缩小至单个元素。

总结公式推导的核心

	•	通过斐波那契数列，将查找区间按近似黄金分割点的位置划分。
	•	通过斐波那契的性质  F(k) = F(k-1) + F(k-2) ，确定“中间”位置为 left + F(k-1) - 1，从而更快速接近目标值的位置。

斐波那契查找公式的设计让分割点更加贴近目标值，减少查找次数。