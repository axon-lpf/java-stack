斐波那契查找算法是一种基于斐波那契数列的查找算法。它通过使用斐波那契数来确定每一步分割的位置，以便更接近目标元素。由于斐波那契数列在较大数据集下具有较好的分割性能，所以它在特定情况下比二分查找更有效。下面解释其公式和推导过程。

斐波那契查找算法公式的来源

斐波那契查找的核心思想是通过斐波那契数列确定查找范围，以缩小查找区间。斐波那契查找使用斐波那契数列的性质来确定查找时的分割点。假设我们有一个有序数组  arr  需要查找的元素为  key ，左、右边界分别为  left  和  right 。

斐波那契数列定义

斐波那契数列是一个递归数列，每一个数字都是前两个数字之和：

F(n) = F(n-1) + F(n-2)

其中  F(0) = 0 ,  F(1) = 1 ,  F(2) = 1 ,  F(3) = 2 , …

斐波那契数列的值增长很快，所以它在分割较大数据集时可以形成合理的区间。

斐波那契查找的步骤

	1.	找到合适的斐波那契数：
	•	斐波那契查找的第一步是找到一个足够大的斐波那契数  F(k) ，使得  F(k) - 1  大于或等于数组的长度  n 。这样可以确保我们在查找时不会越界。
	2.	定义分割点：
	•	将查找位置放在  F(k-1) - 1  的位置（斐波那契数列的倒数第二个位置）。
	•	在这种分割方式下，将数组分成前半部分（长度  F(k-1) ）和后半部分（长度  F(k-2) ）。
	3.	递归分割：
	•	如果目标值小于当前分割位置的元素，则继续在前半部分（长度为  F(k-1)  的部分）中查找，新的查找长度为  F(k-1) ，此时  k  变为  k-1 。
	•	如果目标值大于当前分割位置的元素，则继续在后半部分（长度为  F(k-2)  的部分）中查找，新的查找长度为  F(k-2) ，此时  k  变为  k-2 。
	•	重复上述步骤，直到找到目标值或数组长度缩小到 0。

公式推导

根据上述过程，斐波那契查找可以用以下公式来确定每次分割的位置：

mid = left + F(k-1) - 1


	•	其中  left  是当前查找区间的起点， F(k-1) - 1  表示在当前查找范围内按斐波那契数列比例分割的位置。

斐波那契查找的特点

	•	时间复杂度：平均情况下为  O(\log n) ，因为每次查找的范围缩小比例大约为黄金分割点（ \frac{\sqrt{5} - 1}{2} ）。
	•	空间复杂度： O(1) ，因为只需记录几个斐波那契数。

总结

斐波那契查找算法之所以有效，是因为斐波那契数列的增长符合黄金分割点的特性，可以更接近目标值的位置。



案例说明：

我们通过一个示例来演示斐波那契查找的具体步骤。假设我们有一个排序好的数组：

arr = [10, 22, 35, 40, 45, 50, 80, 82, 85, 90, 100]


我们要查找的目标值是 85。数组的长度  n = 11 。

步骤 1：找到合适的斐波那契数

我们要找到一个斐波那契数  F(k)  使得  F(k) - 1  大于或等于  n 。

斐波那契数列前几项为：

F(0) = 0, F(1) = 1, F(2) = 1, F(3) = 2, F(4) = 3, F(5) = 5, F(6) = 8, F(7) = 13


我们发现  F(7) = 13  是第一个满足  F(k) - 1 \geq n  的数，因此我们选取  F(k) = 13  和  k = 7 。

步骤 2：初始化左右边界和分割点

初始情况下：

	•	left = 0
	•	right = n - 1 = 10
	•	k = 7

我们用公式确定分割位置：

mid = left + F(k - 1) - 1 = 0 + F(6) - 1 = 0 + 8 - 1 = 7


于是，初始的 mid = 7，我们比较 arr[7] 与目标值 85：

	•	arr[7] = 82，小于目标值 85。

步骤 3：调整查找范围并继续查找

由于 85 大于 82，我们可以排除索引 7 及其左侧的所有值。因此，我们更新 left 为 mid + 1 = 8，并将  k  减少 2，即  k = 5 ，继续查找。

计算新的 mid 值：

mid = left + F(k - 1) - 1 = 8 + F(4) - 1 = 8 + 3 - 1 = 10


新 mid = 10，我们比较 arr[10] 与目标值 85：

	•	arr[10] = 100，大于目标值 85。

步骤 4：再次调整查找范围

这次 85 小于 100，所以我们排除 10 位置及其右侧的值。更新 right = mid - 1 = 9，并将  k  减少 1，即  k = 4 ，继续查找。

计算新的 mid 值：

mid = left + F(k - 1) - 1 = 8 + F(3) - 1 = 8 + 2 - 1 = 9


新 mid = 9，比较 arr[9] 与目标值 85：

	•	arr[9] = 90，大于 85。

步骤 5：继续调整范围

再一次，85 小于 90，所以排除 9 位置及其右侧的值。更新 right = mid - 1 = 8，此时 k 减少到  k = 2 。

最后计算 mid 值：

mid = left + F(k - 1) - 1 = 8 + F(1) - 1 = 8 + 1 - 1 = 8


新 mid = 8，比较 arr[8] 与目标值 85：

	•	arr[8] = 85，等于目标值 85。

查找完成

找到目标值 85 的位置在 arr[8]。
