1. ArrayList

ArrayList 是基于动态数组的数据结构。

优点：

	•	随机访问快：由于是基于数组，ArrayList 支持通过索引快速访问元素，时间复杂度为  O(1) 。
	•	内存使用更紧凑：数组连续存储元素，没有额外的指针开销，内存占用相对较低。
	•	空间分配相对高效：当容量不够时，ArrayList 会自动扩容，通常是现有容量的 1.5 倍。

缺点：

	•	插入和删除慢：如果在中间位置插入或删除元素，需要移动大量元素，时间复杂度为  O(n) ，性能较差。
	•	扩容成本：当数组容量不足时，需要创建一个新的数组并将旧数组的元素复制到新数组中，这个过程比较耗时。
	•	频繁扩容可能浪费空间：数组大小不断增加，可能导致空间浪费，尤其在扩容后还未完全填充时。

选择建议：

	•	如果你的应用程序主要需要频繁随机访问（通过索引访问），并且插入和删除操作相对较少，使用 ArrayList 会更好。
	•	如果你的应用程序需要频繁插入和删除操作，特别是在列表的中间位置，LinkedList 是更合适的选择。