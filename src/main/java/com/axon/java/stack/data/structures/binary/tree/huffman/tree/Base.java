package com.axon.java.stack.data.structures.binary.tree.huffman.tree;


/**
 *  进制之间的转换
 *
 *  87 作为一个十进制数，可以转换成不同的进制。除了二进制，常用的进制还包括八进制、十六进制等。以下是 87 转换为其他进制的结果及对应的转换过程：
 *
 * 1. 二进制（Base-2）
 *
 * 二进制只使用 0 和 1 表示数值。转换步骤是不断将 87 除以 2，记录商和余数，直到商为 0，然后将余数倒序排列。
 *
 * 	•	87 ÷ 2 = 43 余 1
 * 	•	43 ÷ 2 = 21 余 1
 * 	•	21 ÷ 2 = 10 余 1
 * 	•	10 ÷ 2 = 5 余 0
 * 	•	5 ÷ 2 = 2 余 1
 * 	•	2 ÷ 2 = 1 余 0
 * 	•	1 ÷ 2 = 0 余 1
 *
 * 将余数倒序排列：87 的二进制为 1010111
 *
 * 2. 八进制（Base-8）
 *
 * 八进制使用 0 到 7 表示数值。转换步骤是将 87 除以 8，不断记录商和余数，直到商为 0，然后将余数倒序排列。
 *
 * 	•	87 ÷ 8 = 10 余 7
 * 	•	10 ÷ 8 = 1 余 2
 * 	•	1 ÷ 8 = 0 余 1
 *
 * 将余数倒序排列：87 的八进制为 127
 *
 * 3. 十六进制（Base-16）
 *
 * 十六进制使用 0 到 9 和 A 到 F 表示数值，其中 A 表示 10，B 表示 11，以此类推。转换步骤与八进制类似，将 87 除以 16 记录商和余数。
 *
 * 	•	87 ÷ 16 = 5 余 7
 * 	•	5 ÷ 16 = 0 余 5
 *
 * 将余数倒序排列：87 的十六进制为 57
 *
 * 4. 三进制（Base-3）
 *
 * 三进制使用 0、1、2 表示数值。步骤同样是不断将 87 除以 3。
 *
 * 	•	87 ÷ 3 = 29 余 0
 * 	•	29 ÷ 3 = 9 余 2
 * 	•	9 ÷ 3 = 3 余 0
 * 	•	3 ÷ 3 = 1 余 0
 * 	•	1 ÷ 3 = 0 余 1
 *
 * 将余数倒序排列：87 的三进制为 10200
 *
 * 5. 十二进制（Base-12）
 *
 * 十二进制使用 0 到 9 和 A、B 表示数值，其中 A 表示 10，B 表示 11。转换方法与其他进制相同。
 *
 * 	•	87 ÷ 12 = 7 余 3
 * 	•	7 ÷ 12 = 0 余 7
 *
 * 将余数倒序排列：87 的十二进制为 73
 *
 * 6. 五进制（Base-5）
 *
 * 五进制使用 0 到 4 表示数值。
 *
 * 	•	87 ÷ 5 = 17 余 2
 * 	•	17 ÷ 5 = 3 余 2
 * 	•	3 ÷ 5 = 0 余 3
 *
 * 将余数倒序排列：87 的五进制为 322
 *
 * 总结
 *
 * 87 可以转换为不同的进制，常见的进制表示如下：
 *
 * 	•	二进制: 1010111
 * 	•	八进制: 127
 * 	•	十六进制: 57
 * 	•	三进制: 10200
 * 	•	十二进制: 73
 * 	•	五进制: 322
 *
 * 这些转换都基于相同的原则：通过反复除以目标进制的基数并记录余数，然后将余数倒序排列。不同进制系统在不同场景下有着广泛应用，例如二进制在计算机系统中广泛使用，十六进制在计算机编程中常用于表示内存地址或颜色等数据。
 *
 *
 *
 * 将负数 -87 转换为二进制，通常使用补码表示法。补码表示法是计算机中表示有符号整数的常用方式。以下是将 -87 转换为二进制补码表示的步骤：
 *
 * 步骤 1：将正数 87 转换为二进制
 *
 * 正数 87 的二进制表示是 1010111（这是 7 位二进制数）。
 *
 * 步骤 2：将 87 扩展为 8 位二进制数
 *
 * 为了使用补码，需要扩展为标准的 8 位二进制数：
 *  87 = 01010111
 *
 * 步骤 3：求反码
 *
 * 将每一位取反，得到反码：
 *  01010111  →  10101000
 *
 * 步骤 4：求补码
 *
 * 在反码的基础上，加 1：
 *  10101000 + 1 = 10101001
 *
 * 因此，十进制 -87 的二进制补码表示为 10101001（这是 8 位补码表示法）。
 *
 * 补码解释
 *
 * 在补码表示法中，最高位是符号位，1 表示负数，0 表示正数。
 *
 *
 *
 * 反码和补码是计算机中表示有符号整数的一种方式。它们与原码（直接使用数值的二进制表示）一起，帮助计算机在二进制运算中处理正数和负数。
 *
 * 1. 原码
 *
 * 原码是直接将一个数转换为二进制表示。对于正数，原码的二进制表示就是数值的普通二进制形式；对于负数，原码的最高位（符号位）用来表示正负，0表示正数，1表示负数。
 *
 * 	•	例子：
 * 	•	+87 的原码（8 位）：01010111
 * 	•	-87 的原码（8 位）：11010111
 *
 * 2. 反码
 *
 * 反码是将一个数的二进制形式按位取反（即将 0 变为 1，将 1 变为 0），但符号位保持不变。反码主要用于负数的表示。
 *
 * 	•	正数的反码：正数的反码和它的原码相同。
 * 	•	负数的反码：负数的反码是将该数的绝对值的二进制部分（不包括符号位）按位取反，符号位保持 1。
 * 	•	例子：
 * 	•	+87 的反码（8 位）：01010111（和原码相同）
 * 	•	-87 的反码（8 位）：10101000（除了符号位，其余位按位取反）
 *
 * 3. 补码
 *
 * 补码是基于反码的表示方法，用于二进制运算。对于正数，补码和原码、反码相同；对于负数，补码是在反码的基础上加 1。
 *
 * 	•	正数的补码：正数的补码与原码相同。
 * 	•	负数的补码：负数的补码是其反码加 1。
 * 	•	例子：
 * 	•	+87 的补码（8 位）：01010111（与原码相同）
 * 	•	-87 的补码（8 位）：10101001（反码 10101000 加 1 得到 10101001）
 *
 * 反码与补码的用途
 *
 * 	•	反码：主要用于计算机早期处理减法运算。
 * 	•	补码：是现代计算机用于表示负数和进行加减运算的主要方式。补码的优点是它能将减法转换为加法运算，简化了硬件的实现。
 *
 * 具体例子：-87 的二进制表示
 *
 * 	1.	原码：11010111（符号位 1，表示负数）
 * 	2.	反码：10101000（除符号位外按位取反）
 * 	3.	补码：10101001（反码 10101000 加 1）
 *
 * 因此，-87 的补码表示为 10101001。
 *
 *
 * 87就是一个10进制
 *
 *
 */
public class Base {
}
